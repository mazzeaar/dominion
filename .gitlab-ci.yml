stages:
  - pipeline
  - deploy

pipeline:
  stage: pipeline
  image: ubuntu:22.04
  script:
    # Install dependencies
    - apt-get update && apt-get install -y clang clang-format clang-tidy cmake cppcheck libwxgtk3.0-gtk3-dev git

    # Create and navigate to the build directory
    - mkdir -p build
    - cd build

    # Run format
    - echo "Running clang-format..."
    - cmake -DCMAKE_BUILD_TYPE=Debug ..
    - cmake --build . --target format > ../format.log || echo "clang-format failed!" > ../format.failed

    # Run lint
    - echo "Running clang-tidy and cppcheck..."
    - cmake --build . --target check > ../lint.log || echo "Linting failed!" > ../lint.failed

    # Build and run tests
    - echo "Building and running tests..."
    - cmake --build . -j $(nproc) > ../build.log || echo "Build failed!" > ../build.failed
    - ctest --output-on-failure > ../test.log || echo "Tests failed!" > ../test.failed

  artifacts:
    paths:
      - format.log
      - format.failed
      - lint.log
      - lint.failed
      - build.log
      - build.failed
      - test.log
      - test.failed
    expire_in: 1 hour
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' || ($CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == 'main')

format:
  stage: pipeline
  image: ubuntu:22.04
  script:
    - if [ -f format.failed ]; then echo "clang-format failed!"; cat format.log; exit 1; else echo "clang-format passed!"; fi
  dependencies:
    - pipeline
  allow_failure: false

lint:
  stage: pipeline
  image: ubuntu:22.04
  script:
    - if [ -f lint.failed ]; then echo "Linting failed!"; cat lint.log; exit 1; else echo "Linting passed!"; fi
  dependencies:
    - pipeline
  allow_failure: false

test:
  stage: pipeline
  image: ubuntu:22.04
  script:
    - if [ -f build.failed ] || [ -f test.failed ]; then
          echo "Tests or build failed!";
          cat build.log test.log;
          exit 1;
      else echo "Tests passed!"; fi
  dependencies:
    - pipeline
  allow_failure: false

deploy:
  stage: deploy
  image: ubuntu:22.04
  script:
    - apt-get update && apt-get install -y openssh-client
    - mkdir -p ~/.ssh
    # Decode the SSH deployment key
    - base64 -d $SSH_DEPLOY_KEY > ~/.ssh/id_rsa
    # Make SSH happy and protect the key
    - chmod 600 ~/.ssh/id_rsa
    # Add the host to known_hosts
    - ssh-keyscan -H se.nicolabruhin.com >> ~/.ssh/known_hosts
    # Do the actual deployment
    - ssh dominion@se.nicolabruhin.com "cd /opt/dominion/dominion && git pull && cd docker && docker compose down --rmi all && docker compose up -d --build"
  environment:
    name: production
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push' && $CI_COMMIT_REF_NAME == 'main'  # only run on the main branch
      when: on_success                                                    # run automatically if condition above is true
    - when: never                                                         # else: don't run it
