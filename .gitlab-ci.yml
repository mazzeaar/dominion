stages:
  - format
  - lint
  - test
  - deploy

format:
  stage: format
  image: ubuntu:22.04
  script:
    - apt-get update && apt-get install -y clang clang-format cmake git libwxgtk3.0-gtk3-dev
    - mkdir -p build
    - cd build
    - cmake ..
    - cmake --build . --target format
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' || ($CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == 'main')

lint:
  stage: lint
  image: ubuntu:22.04
  script:
    - apt-get update && apt-get install -y clang clang-tidy cmake cppcheck libwxgtk3.0-gtk3-dev
    - mkdir -p build
    - cd build
    - cmake ..
    - cmake --build . --target check
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' || ($CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == 'main')

test:
  stage: test
  image: ubuntu:22.04
  script:
    - apt-get update && apt-get install -y clang cmake libwxgtk3.0-gtk3-dev
    - mkdir -p build
    - cd build
    - cmake ..
    - cmake --build . -j $(nproc)
    - ctest --output-on-failure
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' || ($CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == 'main')

deploy:
  stage: deploy
  image: ubuntu:22.04
  script:
    - apt-get update && apt-get install -y openssh-client
    - echo "Deploying the application..."
    - mkdir -p ~/.ssh
    # Add the host to known_hosts
    - ssh-keyscan -H se.nicolabruhin.com >> ~/.ssh/known_hosts
    # Make ssh happy and protect the key
    - chmod 600 $SSH_DEPLOY_KEY
    # Do the actual deployment
    - ssh -i $SSH_DEPLOY_KEY dominion@se.nicolabruhin.com "cd /opt/dominion && pwd"
  dependencies:
    - test
  environment:
    name: production
  rules:
    # - if: $CI_PIPELINE_SOURCE == 'merge_request_event' || ($CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == 'main')
    - when: manual
